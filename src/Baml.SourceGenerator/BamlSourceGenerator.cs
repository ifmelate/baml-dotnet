using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Baml.SourceGenerator
{
    /// <summary>
    /// Source generator that generates C# client code from BAML schema files.
    /// </summary>
    [Generator]
    public class BamlSourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            // Register for additional files (BAML schema files)
            context.RegisterForPostInitialization(i => i.AddSource("BamlAttributes.g.cs", GenerateAttributes()));
        }

        public void Execute(GeneratorExecutionContext context)
        {
            try
            {
                // Find all .baml files in the project
                var bamlFiles = context.AdditionalFiles
                    .Where(file => Path.GetExtension(file.Path).Equals(".baml", StringComparison.OrdinalIgnoreCase))
                    .ToList();

                if (!bamlFiles.Any())
                {
                    // No BAML files found, nothing to generate
                    return;
                }

                var parser = new BamlParser();
                var allSchemas = new List<BamlSchema>();

                // Parse all BAML files
                foreach (var file in bamlFiles)
                {
                    var content = file.GetText(context.CancellationToken)?.ToString();
                    if (string.IsNullOrEmpty(content))
                        continue;

                    try
                    {
                        var schema = parser.Parse(content, file.Path);
                        allSchemas.Add(schema);
                    }
                    catch (Exception ex)
                    {
                        context.ReportDiagnostic(Diagnostic.Create(
                            new DiagnosticDescriptor(
                                "BAML001",
                                "BAML parsing error",
                                $"Failed to parse BAML file '{file.Path}': {ex.Message}",
                                "BAML",
                                DiagnosticSeverity.Error,
                                true),
                            Location.None));
                    }
                }

                if (!allSchemas.Any())
                    return;

                // Generate code
                var generator = new BamlCodeGenerator();
                var generatedCode = generator.Generate(allSchemas);

                // Add generated source files
                foreach (var kvp in generatedCode)
                {
                    context.AddSource(kvp.Key, SourceText.From(kvp.Value, Encoding.UTF8));
                }
            }
            catch (Exception ex)
            {
                context.ReportDiagnostic(Diagnostic.Create(
                    new DiagnosticDescriptor(
                        "BAML000",
                        "BAML generator error",
                        $"Unexpected error in BAML source generator: {ex.Message}",
                        "BAML",
                        DiagnosticSeverity.Error,
                        true),
                    Location.None));
            }
        }

        private static string GenerateAttributes()
        {
            return @"
using System;

namespace Baml.Runtime
{
    /// <summary>
    /// Marks a class as generated by the BAML source generator.
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface | AttributeTargets.Enum)]
    internal sealed class BamlGeneratedAttribute : Attribute
    {
        public string SourceFile { get; }
        public string Version { get; }

        public BamlGeneratedAttribute(string sourceFile, string version = ""1.0.0"")
        {
            SourceFile = sourceFile;
            Version = version;
        }
    }

    /// <summary>
    /// Marks a method as a BAML function.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method)]
    internal sealed class BamlFunctionAttribute : Attribute
    {
        public string FunctionName { get; }
        public string Client { get; }

        public BamlFunctionAttribute(string functionName, string client = null)
        {
            FunctionName = functionName;
            Client = client;
        }
    }
}
";
        }
    }
}

